//Calaos Home Theme
//Copyright 2011 Calaos
//All graphics are copyrighted materials.
//You can't modify/distribute/sell it for any purpose.

group
{
        name: "calaos/page/keyboard";

        parts
        {
                #include "activity_header_footer.edc"

                part
                {
                        name: "module.subtitle";
                        clip_to: "content_clip";
                        type: TEXTBLOCK;
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 0.0  1.0; offset: 0 -1; to_y: "header_img"; }
                                rel2 { relative: 1.0  1.0; offset: -1 30; to_y: "header_img"; }
                                align: 0.5 0.5;
                                text
                                {
                                        style: "KeyboardSubtitle";
                                        text: "Un sous-titre pour donner une explication plus détaillée.";
                                }
                        }
                }

                part
                {
                        name: "sep1";
                        clip_to: "content_clip";
                        description
                        {
                                state: "default" 0.0;
                                image.normal: "middle_skyline_neon.png";
                                rel1 { relative: 0.0  1.0; offset: 0 -1; to_y: "module.subtitle"; }
                                rel2 { relative: 1.0  1.0; offset: -1 4; to_y: "module.subtitle"; }
                        }
                }

                part
                {
                        name: "sep2";
                        clip_to: "content_clip";
                        description
                        {
                                state: "default" 0.0;
                                image.normal: "middle_skyline_neon.png";
                                rel1 { relative: 0.0  0.0; offset: 0  -6; to_y: "keyboard"; }
                                rel2 { relative: 1.0  0.0; offset: -1 -1; to_y: "keyboard"; }
                        }
                }

                part
                {
                        name: "keyboard";
                        clip_to: "content_clip";
                        type: SWALLOW;
                        description
                        {
                                state: "default" 0.0;
                                rel1.to_y: "content_size";
                                rel2.to_y: "content_size";
                                rel1 { relative: 0.0  1.0; offset:  0  -252; }
                                rel2 { relative: 1.0  1.0; offset: -1  -1; }
                        }
                }

                part
                {
                        name: "textblock";
                        clip_to: "content_clip";
                        type: SWALLOW;
                        description
                        {
                                state: "default" 0.0;
                                rel1.to_y: "sep1";
                                rel2.to_y: "sep2";
                                rel1 { relative: 0.0 1.0; offset: 0 2; }
                                rel2 { relative: 1.0 0.0; offset: -1 -3; }
                        }
                }

                alias: "button.valid" "button_valid:button.valid";
                part
                {
                        name: "button_valid";
                        clip_to: "content_clip";
                        type: GROUP;
                        source: "button.valid";
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 1.0 0.0; offset: -125-130 10; }
                                rel2 { relative: 1.0 0.0; offset: -125-10 44; }
                                rel1.to: "module_footer_background";
                                rel2.to: "module_footer_background";
                        }
                }

                alias: "button.cleartext" "button_cleartext:button.cleartext";
                part
                {
                        name: "button_cleartext";
                        clip_to: "content_clip";
                        type: GROUP;
                        source: "button.cleartext";
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 1.0 0.0; offset: -125-140-213 10; }
                                rel2 { relative: 1.0 0.0; offset: -125-130-10 44; }
                                rel1.to: "module_footer_background";
                                rel2.to: "module_footer_background";
                        }
                }
        }

        programs
        {

        }

}

#ifdef KMODULE_TEXT
#undef KMODULE_TEXT
#endif
#define KMODULE_TEXT "keyboard_text"
#include "keyboard_macros.edc"

group
{
        name: "calaos/keyboard";

        script
        {
                public is_clicked;
        }

        parts
        {
                part
                {
                        name: "module_keyboard";
                        type: RECT;
                        description
                        {
                                state: "default" 0.0;
                        }
                }

                part
                {
                        name: "keyboard_text";
                        type: RECT;
                        pointer_mode: NOGRAB;
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 0.0  0.0; offset:  0  -400; }
                                rel2 { relative: 1.0  0.0; offset: -1  -300; }
                                visible: 0;
                        }
                }

                part
                {
                        name: "keyboard_alpha";
                        type: RECT;
                        pointer_mode: NOGRAB;
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 0.5  0.5; offset: -292  -126; }
                                rel2 { relative: 0.5  0.5; offset:  293   126; }
                        }
                }

                #ifdef ROW1
                #undef ROW1
                #endif
                #ifdef ROW2
                #undef ROW2
                #endif
                #ifdef ROW3
                #undef ROW3
                #endif
                #ifdef ROW4
                #undef ROW4
                #endif
                #ifdef COL_SIZE
                #undef COL_SIZE
                #endif
                #ifdef KEY_SIZE
                #undef KEY_SIZE
                #endif
                #define ROW1            20
                #define ROW2            79
                #define ROW3            138
                #define ROW4            197
                #define COL_SIZE        60
                #define KEY_SIZE        45

                //first line
                KEY_ALPHA("a", "A", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 0), ROW1,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("z", "Z", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 1), ROW1,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("e", "E", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 2), ROW1,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("r", "R", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 3), ROW1,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 3 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("t", "T", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 4), ROW1,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 4 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("y", "Y", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 5), ROW1,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 5 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("u", "U", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 6), ROW1,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 6 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("i", "I", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 7), ROW1,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 7 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("o", "O", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 8), ROW1,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 8 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("p", "P", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 9), ROW1,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 9 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_alpha")

                //2nd line
                KEY_ALPHA("q", "Q", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 0), ROW2,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("s", "S", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 1), ROW2,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("d", "D", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 2), ROW2,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("f", "F", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 3), ROW2,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 3 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("g", "G", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 4), ROW2,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 4 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("h", "H", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 5), ROW2,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 5 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("j", "J", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 6), ROW2,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 6 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("k", "K", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 7), ROW2,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 7 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("l", "L", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 8), ROW2,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 8 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("m", "M", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 9), ROW2,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 9 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_alpha")

                //3rd line
                KEY_SPECIAL_TOGGLE("key_maj", "Maj", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 0), ROW3,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("w", "W", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 2), ROW3,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("x", "X", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 3), ROW3,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 3 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("c", "C", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 4), ROW3,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 4 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("v", "V", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 5), ROW3,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 5 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("b", "B", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 6), ROW3,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 6 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_ALPHA("n", "N", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 7), ROW3,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 7 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_SPECIAL("key_del", "", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 8), ROW3,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 9 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_alpha")

                part
                {
                        name: "icon_key_del";
                        clip_to: "key_key_del";
                        mouse_events: 0;
                        description
                        {
                                state: "default" 0.0;
                                image.normal: "button_key_del.png";
                                rel1.to: "key_key_del";
                                rel2.to: "key_key_del";
                                rel1 { relative: 0.0 0.0; offset: 7 11; }
                                rel2 { relative: 0.0 0.0; offset: 7+28 11+9; }
                                color: 255 255 255 127;
                        }
                }

                //4th line
                KEY_SPECIAL_TOGGLE("key_other", "Autres", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 0), ROW4,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_SPECIAL("key_space", "", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 2), ROW4,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 7 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_alpha")
                KEY_SPECIAL("key_enter", "", "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 8), ROW4,
                        "keyboard_alpha",
                        0.0, 0.0, (COL_SIZE * 9 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_alpha")

                part
                {
                        name: "icon_key_enter";
                        clip_to: "key_key_enter";
                        mouse_events: 0;
                        description
                        {
                                state: "default" 0.0;
                                image.normal: "button_key_return.png";
                                rel1.to: "key_key_enter";
                                rel2.to: "key_key_enter";
                                rel1 { relative: 1.0 1.0; offset: -9-30 -9-19; }
                                rel2 { relative: 1.0 1.0; offset: -9 -9; }
                                color: 255 255 255 127;
                        }
                }

                part
                {
                        name: "keyboard_left_keys1";
                        type: RECT;
                        clip_to: "module_keyboard";
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 0.0  0.5; offset: -195  -126; }
                                rel2 { relative: 0.0  0.5; offset:  -33   126; }
                        }
                        description
                        {
                                state: "visible" 0.0;
                                rel1 { relative: 0.0  0.5; offset:  33  -126; }
                                rel2 { relative: 0.0  0.5; offset: 194   126; }
                        }
                }

                part
                {
                        name: "keyboard_left_keys2";
                        type: RECT;
                        clip_to: "module_keyboard";
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 0.0  0.5; offset: -195  -126; }
                                rel2 { relative: 0.0  0.5; offset:  -33   126; }
                        }
                        description
                        {
                                state: "visible" 0.0;
                                rel1 { relative: 0.0  0.5; offset:  33  -126; }
                                rel2 { relative: 0.0  0.5; offset: 194   126; }
                        }
                }

                part
                {
                        name: "keyboard_right_keys1";
                        type: RECT;
                        clip_to: "module_keyboard";
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 1.0  0.5; offset:  33  -126; }
                                rel2 { relative: 1.0  0.5; offset: 195   126; }
                        }
                        description
                        {
                                state: "visible" 0.0;
                                rel1 { relative: 1.0  0.5; offset: -195  -126; }
                                rel2 { relative: 1.0  0.5; offset:  -34   126; }
                        }
                }

                part
                {
                        name: "keyboard_right_keys2";
                        type: RECT;
                        clip_to: "module_keyboard";
                        description
                        {
                                state: "default" 0.0;
                                rel1 { relative: 1.0  0.5; offset:  33  -126; }
                                rel2 { relative: 1.0  0.5; offset: 195   126; }
                        }
                        description
                        {
                                state: "visible" 0.0;
                                rel1 { relative: 1.0  0.5; offset: -195  -126; }
                                rel2 { relative: 1.0  0.5; offset:  -34   126; }
                        }
                }

                #undef COL_SIZE
                #define COL_SIZE        58


                //Left panel 1
                KEY_NORMAL("é", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 0), ROW1,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_left_keys1")
                KEY_NORMAL("è", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 1), ROW1,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_left_keys1")
                KEY_NORMAL("à", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 2), ROW1,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_left_keys1")
                KEY_NORMAL("ç", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 0), ROW2,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_left_keys1")
                KEY_NORMAL("@", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 1), ROW2,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_left_keys1")
                KEY_NORMAL("ù", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 2), ROW2,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_left_keys1")
                KEY_NORMAL_SPECIAL("key_question", "?", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 0), ROW3,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_left_keys1")
                KEY_NORMAL_SPECIAL("key_quote", "\"", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 1), ROW3,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_left_keys1")
                KEY_NORMAL("!", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 2), ROW3,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_left_keys1")
                KEY_NORMAL("-", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 0), ROW4,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_left_keys1")
                KEY_NORMAL("_", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 1), ROW4,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_left_keys1")
                KEY_NORMAL("/", "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 2), ROW4,
                        "keyboard_left_keys1",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_left_keys1")


                //Right panel 1
                KEY_NORMAL("7", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 0), ROW1,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_right_keys1")
                KEY_NORMAL("8", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 1), ROW1,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_right_keys1")
                KEY_NORMAL("9", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 2), ROW1,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_right_keys1")
                KEY_NORMAL("4", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 0), ROW2,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_right_keys1")
                KEY_NORMAL("5", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 1), ROW2,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_right_keys1")
                KEY_NORMAL("6", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 2), ROW2,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_right_keys1")
                KEY_NORMAL("1", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 0), ROW3,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_right_keys1")
                KEY_NORMAL("2", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 1), ROW3,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_right_keys1")
                KEY_NORMAL("3", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 2), ROW3,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_right_keys1")
                KEY_NORMAL("0", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 0), ROW4,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_right_keys1")
                KEY_NORMAL(".", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 1), ROW4,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_right_keys1")
                KEY_NORMAL(",", "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 2), ROW4,
                        "keyboard_right_keys1",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_right_keys1")


                //Left panel 2
                KEY_NORMAL("%", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 0), ROW1,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_left_keys2")
                KEY_NORMAL("#", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 1), ROW1,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_left_keys2")
                KEY_NORMAL("°", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 2), ROW1,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_left_keys2")
                KEY_NORMAL("&", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 0), ROW2,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_left_keys2")
                KEY_NORMAL("(", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 1), ROW2,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_left_keys2")
                KEY_NORMAL(")", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 2), ROW2,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_left_keys2")
                KEY_NORMAL("|", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 0), ROW3,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_left_keys2")
                KEY_NORMAL_SPECIAL("key_bracket_open", "[", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 1), ROW3,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_left_keys2")
                KEY_NORMAL_SPECIAL("key_bracket_close", "]", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 2), ROW3,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_left_keys2")
                KEY_NORMAL("~", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 0), ROW4,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_left_keys2")
                KEY_NORMAL("{", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 1), ROW4,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_left_keys2")
                KEY_NORMAL("}", "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 2), ROW4,
                        "keyboard_left_keys2",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_left_keys2")


                //Right panel 2
                KEY_NORMAL("<", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 0), ROW1,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_right_keys2")
                KEY_NORMAL(">", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 1), ROW1,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_right_keys2")
                KEY_NORMAL("=", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 2), ROW1,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW1 + KEY_SIZE),
                        "keyboard_right_keys2")
                KEY_NORMAL_SPECIAL("key_double_point", ":", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 0), ROW2,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_right_keys2")
                KEY_NORMAL(";", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 1), ROW2,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_right_keys2")
                KEY_NORMAL("$", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 2), ROW2,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW2 + KEY_SIZE),
                        "keyboard_right_keys2")
                KEY_NORMAL_SPECIAL("key_backslash", "\\", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 0), ROW3,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_right_keys2")
                KEY_NORMAL("^", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 1), ROW3,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_right_keys2")
                KEY_NORMAL("€", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 2), ROW3,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW3 + KEY_SIZE),
                        "keyboard_right_keys2")
                KEY_NORMAL("+", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 0), ROW4,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 0 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_right_keys2")
                KEY_NORMAL_SPECIAL("key_multiply", "*", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 1), ROW4,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 1 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_right_keys2")
                KEY_NORMAL("'", "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 2), ROW4,
                        "keyboard_right_keys2",
                        0.0, 0.0, (COL_SIZE * 2 + KEY_SIZE), (ROW4 + KEY_SIZE),
                        "keyboard_right_keys2")

        }

        programs
        {
                program
                {
                        name: "init";
                        signal: "show";
                        after: "keyboard_normal";
                }

                program
                {
                        name: "keyboard_upper";
                        signal: "keyboard,upper";
                        source: "calaos";
                        action: STATE_SET "visible" 0.0;
                        transition: DECELERATE 0.2;
                        target: "key_key_maj_select";
                }

                program
                {
                        name: "keyboard_lower";
                        signal: "keyboard,lower";
                        source: "calaos";
                        action: STATE_SET "default" 0.0;
                        transition: DECELERATE 0.2;
                        target: "key_key_maj_select";
                }

                program
                {
                        name: "keyboard_normal";
                        signal: "keyboard,normal";
                        source: "calaos";
                        action: STATE_SET "default" 0.0;
                        transition: ACCELERATE 0.2;
                        target: "keyboard_left_keys2";
                        target: "keyboard_right_keys2";
                        target: "key_key_other_select";
                        after: "keyboard_normal2";
                }
                program
                {
                        name: "keyboard_normal2";
                        action: STATE_SET "visible" 0.0;
                        transition: DECELERATE 0.25;
                        target: "keyboard_left_keys1";
                        target: "keyboard_right_keys1";
                }

                program
                {
                        name: "keyboard_other";
                        signal: "keyboard,other";
                        source: "calaos";
                        action: STATE_SET "default" 0.0;
                        transition: ACCELERATE 0.2;
                        target: "keyboard_left_keys1";
                        target: "keyboard_right_keys1";
                        after: "keyboard_other2";
                }
                program
                {
                        name: "keyboard_other2";
                        action: STATE_SET "visible" 0.0;
                        transition: DECELERATE 0.25;
                        target: "keyboard_left_keys2";
                        target: "keyboard_right_keys2";
                        target: "key_key_other_select";
                }
        }
}
